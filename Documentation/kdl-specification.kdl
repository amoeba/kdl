` KESTREL DEVELOPMENT LANGUAGE SPECIFICATION
` 
`	Specification Version 2
` 	Language Version 0.2
` 	Date: 8 April 2020
`	Author: Tom Hancocks
`
` ------------------------------------------------------------------------------
` ยง0 : OVERVIEW ================================================================
` This document is intended to act as a specification for KDL. The document is
` itself a KDL script, with explanations being provided as a comments. Whilst it
` is technically possible to pass this document through the KDL assembler it is
` not recommended.
`
` This document is provided as a KDL script so that syntax highlighting can be
` taken advantage of in your favorite code editor (provided there is a syntax
` definition available.)
`
` KDL is designed to provide a modern textual representation of the Macintosh
` Resource Fork. The Resource Fork is obsolete as of the time of this writing,
` but it still plays a role for many. Older Macintosh software and games relied
` on the Resource Fork, and games such as the Escape Velocity series are built
` upon them and depend on the availability of it for their plug-in development
` communities.
`
` Due to the difficulties in accessing and editing resources, specialized tools
` commonly sprang up to assist developers and plug-in creators. For the Escape
` Velocity series, generic tools such as ResEdit were used, or even specialized
` tools as NovaTools, MissionComputer or EVNEW.
`
` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
` NOTE: The name ResourceFork actually refers to a specific File Fork in the
`       file system, not the binary format that holds resources. Prior to 
`       Mac OS X there was no distinction between the format and the fork in
`       which it was held. Apple began packaging resources inside the DataFork
`       of a file with the introduction of Mac OS X. These files can be 
`       recognized by their .rsrc file extension and are called ResourceFiles.
` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`
` Kestrel will rely upon the Resource format, but not expect people to actually
` deal with it on a day to day basis when developing content. This is where KDL
` comes in.
`
` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
` EXAMPLE:

	declare Color {
		new (#128, "Red") {
			RGB = 0xFF0000;
		};

		new (#129, "Green") {
			RGB = 0x00FF00;
		};
	};

	declare Fruit {
		new (#128, "Apple") {
			AverageWeight = 100;
			Color = #129;
		};

		new (#129, "Strawberry") {
			AverageWeight = 10;
			Color = #128;
		};
	};

` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`
` This document will cover the various elements and components of KDL and how 
` the language is intended to work. It is not intended to be a tutorial, but can
` be used as a learning resource for the language.
`
` ------------------------------------------------------------------------------
` $1 : LITERALS ================================================================
` All programming languages have a concept of literals, and KDL is no different.
` A literal is quite simply a type of value that is used by the language to 
` represent something. There are n types of literal in KDL, which are; Integer,
` String, ResourceID, Percentage, Identifier and Variable.
`
` ------------------------------------------------------------------------------
` $1.1 : INTEGER LITERAL =======================================================
` Integers are whole numbers. They are amongst the most common type of data 
` found in computing, and the most fundamental type of data addressed by KDL.
` Below is an example of some integers.

	-5	-4	-3	-2	-1	0	1 	2	3	4	5

` This is a simple number line that illustrates a sequence of integers. They can
` be either negative or positive, but must be whole numbers. Fractional values
` are not permitted.
`
` You can also represent integers using hexadecimal notation in KDL. This will
` sometimes make more sense than using the more common decimal notation.

	0xCAFECAFE	0x0010	0x42	0xD00D

` ------------------------------------------------------------------------------
` $1.2 : STRING LITERAL ========================================================
` Strings are the basic means of representing text. They are a sequence of 
` characters, and can be recognized as such:

	"This is a string."
	"Strings are encapsulated inside double quotes."

` There isn't really very much to say about strings at the moment, as the 
` handling of strings in KDL is extremely basic.
`
` ------------------------------------------------------------------------------
` $1.3 : RESOURCE ID LITERAL ===================================================
` Traditionally ResourceIDs have just been a signed 16-bit integer. However due
` to the integral/fundamental role that resources play within KDL, it was 
` decided early on to create a special type of literal for them:

	#128	#129	#-1000

` ResourceIDs are simply integers prefixed by a hash ('#'). Internally KDL 
` treats them the same as integers (expect for when it is checking data types).
`
` This diagram illustrates the relationship between the types. We will extend
` this over the course of the document.
`
`   +------------+       
`   | ResourceID | --------is a---+ 
`   +------------+                |      +---------+
`                                 +--->  | Integer |
`   +------------+                |      +---------+
`   |   String   | -composed of---+
`   +------------+
`
` ------------------------------------------------------------------------------
` $1.4 : PERCENTAGE LITERAL ====================================================
` The percentage literal is predominantly present to serve as a syntactic sugar,
` for situations where a percentage makes semantic sense. This type should not
` be relied on heavily at present.

	5%	95%

`
`   +------------+       
`   | Percentage | --------is a---+ 
`   +------------+                |
`                                 |
`   +------------+                |      +---------+
`   | ResourceID | --------is a---+----> | Integer |
`   +------------+                |      +---------+
`                                 |
`   +------------+                |
`   |   String   | -composed of---+
`   +------------+
`
` ------------------------------------------------------------------------------
` $1.5 : IDENTIFIER LITERAL ====================================================
` An identifier literal is a special type of value that is used to identify 
` another value. They are typically used as Type names, Field names and Labels.

	ExampleIdentifier
	ShipAnimation

`
`                             +------------+       
`                             | Percentage | --------is a---+ 
`                             +------------+                |
`                                                           |
`                             +------------+                |      +---------+
`                             | ResourceID | --------is a---+----> | Integer |
`                             +------------+                |      +---------+
`                                                           |
`   +------------+            +------------+                |
`   | Identifier |  is a--->  |   String   | -composed of---+
`   +------------+            +------------+
`
` ------------------------------------------------------------------------------
` $1.6 : VARIABLE LITERAL ======================================================
`

	$FieldNumber
	$id

`
`   +------------+            +------------+       
`   |  Variable  |            | Percentage | --------is a---+ 
`   +------------+            +------------+                |
`         |                                                 |
`         |                   +------------+                |      +---------+
`       is an                 | ResourceID | --------is a---+----> | Integer |
`         |                   +------------+                |      +---------+
`         V                                                 |
`   +------------+            +------------+                |
`   | Identifier |  is a--->  |   String   | -composed of---+
`   +------------+            +------------+
`
` ------------------------------------------------------------------------------
` $2 : RESOURCE DECLARATIONS ===================================================
` For the average user of KDL, construction of resources is the most important
` aspect of the language. Resource construction is performed through a resource
` declaration block, like so:

	declare ResourceType {

` Within the declaration block, we can then create new resources. When 
` creating a resource we need to specify a resource id, and optionally a 
` resource name. The 'new' keyword here denotes that we are creating a new
` resource.

		new (#128, "Resource Name") {

` Within the 'new' resource block, we provide a list of fields and values that
` should be associated with them.

			Field1 = 0x23;
			Field2 = "A string value";
			Field3 = #129;

` In addition to simple field values like these, some fields can accept multiple
` values.

			Field4 = 0x53 #150;
			Field5 = "Option 1" "Option 2";

` Going further still for fields that take a string type value or binary data,
` you can import the contents of another file as the value of the field.

			Field6 = import "File.txt";

` Some fields also have predefined values that could be specified through the
` use of an identifier.

			Field7 = PredefinedValue;

` Taking predefined values further, the value for a field might actually be a
` bitmask or set of flags. If this is the case then you can combine multiple 
` values together like so:

			Field8 = 0x0001 | 0x0002 | 0x0010;
			Field9 = Option1 | Option4 | Option10;

		};

	};

` Resource construction is straight forward and relatively simple by design. The
` intention is that the complexity should be handled by KDL and the Type 
` Definition itself.
`
` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
` NOTE: KDL is still immature and is likely to see a number of expansions over
`       time. The complexity in resource declaration may increase as the 
`       capabilities of KDL increase.
` ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`
` It should be noted as well that is possible to mark a set of declarations as
` examples, and not included in final assembly. Example declarations are still
` processed the same, and will be subjected to all the same error checks.
` 
` Examples are useful when debugging or illustrating how to use a resource type
` that you have just defined/created.
`
` Examples declarations can be recognized as so:

	@example declare ResourceType {
		new (#128) {
			Field1 = "This resource is an example!";
		};
	};

` ------------------------------------------------------------------------------
` $3 : TYPE DEFINITIONS ========================================================
` This section is relevent to anyone who has an interest in defining custom
` resource types for inclusion in their plug-ins (Lua Scripting will provide a
` way of decoding and using these resources in Kestrel), who wishes to work on
` Kestrel itself and needs to add a new type to the engine, or is just curious
` about how it works.
` 
` Let's take a quick look at a type definition before diving in to the mechanics
` behind it.

	@type Message : "msg#" {
		template {
			DWRD Count;
			PSTR Text;
		};

		assert($Count > 0, $Count < 10);

		field("RepeatedMessage") {
			Count;
			Text;
		};
	};

	@example declare Message {
		new (#128) {
			RepeatedMessage = 5 "Hello, World";
		};
	};

` The above example defines a resource type "Message", where each instance has
` a field that specifies the number of times to repeat a message. After the 
` definition, it then provides an example of using the type.
`
` For illustration purposes, and for referencing later this is the binary data
` that is generated by the example.
`
`   050C 4865 6C6C 6F2C 2057 6F72 6C64   |   ^^Hello, World
`
` Don't worry if that doesn't really explain anything. We will get to it later.
`
` The type definition begins with the '@type' directive, and is followed by the
` the name of the type which will be used within KDL and then finally the type
` code that will represent the type within a resource file.
`
` In this example, the type name is 'Message' and the type code is 'msg#'.

	@type Message : "msg#" {

` The type code of a resource must be 4 characters long, and representable in
` Macintosh Roman Encoding.
`
` ------------------------------------------------------------------------------
` $3.1 : TEMPLATE ==============================================================
` By convention the first aspect of a type definition should be the _template_.
` This is a structure that defines the binary layout and fields that make up an
` individual instance of the resource.

		template {

` A template field consists of two parts, a data type and a name. The data type
` is always represented in caps, and is always 4 characters in length. The name
` is capitalized and uses PascalCase by convention, though this is not required.
		
			DWRD Count;
			PSTR Message;

` The following data types are available for use in KDL. The name of each type
` is provided beside it.
			
			HBYT UnsignedByte;      ` 8 Bits / 1 Byte
			DBYT SignedByte;        ` 8 Bits / 1 Byte
			HWRD UnsignedWord;      ` 16 Bits / 2 Bytes
			DWRD SignedWord;        ` 16 Bits / 2 Bytes
			HLNG UnsignedLong;      ` 32 Bits / 4 Bytes
			DLNG SignedLong;        ` 32 Bits / 4 Bytes
			HQAD UnsignedQuad;      ` 64 Bits / 8 Bytes
			DQAD SignedQuad;        ` 64 Bits / 8 Bytes
			PSTR PascalString;      ` 1 Byte Length + String.
			CSTR CString;           ` String + NUL Terminator.
			C000 FixedLengthString; ` 000 - Hex Value representing length of str
			HEXD RawBinaryData;     ` All remaining bytes in resource.
			RECT RectangleStruct;   ` 4(2) Bytes: Top Left Bottom Right
		};

` Over time additional data types may be added to KDL, depending on the required
` resources to be represented.
`
` Each template field automatically becomes a variable within the scope of the
` resource instance. For example, the value of 'Count' field will be accessible
` through the '$Count' variable.
`
` KDL exposes an additional two variables within each resource, '$id' and 
` '$name'.
`
` These variables can be used in specific locations, and are not able to be used
` wherever. As of the time of writing this document (Version 0.2) variables
` can be used within assertions.
`
` ------------------------------------------------------------------------------
` $3.2 : ASSERTIONS ============================================================
` Assertions are a special clauses that can be added to a type definition that
` tell KDL that certain conditions must be met for the resource to be valid. At
` present these conditions must take the form of a simple binary equality, such
` as:

		assert($id >= #128);
		assert($Count > 0, $Count < 10);

` Assertions provide a way to ensure that certain values are valid, or that the
` ID of a resource is within expected/allowed ranges.
`
` ------------------------------------------------------------------------------
` $3.3 : FIELDS ================================================================
` When constructing resources for a defined type, the user specifies values for
` the resources through the use of fields. These differ from the fields of the
` template, but are related.
`
` These fields are the public facing element of the type, whereas the fields in
` the template can be thought of as the private internals and mechanics.
`
` To start creating a field is simple, simply provide the name of the field:

		field("RepeatedMessage") {

` Now that we are working with a specific field, we can attach template fields
` to the field. These represent the specific values that can be provided to the
` resource.
`
` We can add template fields by simply supplying their names:

			Count;
			Message;

` Simply supplying template fields like this is not particularly useful for all
` types of value. For instance, if the field represents a resource id, then we
` would prefer that the user be required to supply a resource id. This can be
` enforced by adding the following to the template field name.

			Graphic as &;

` The 'as' keyword is used to tell KDL that we are supplying explicit type 
` information to the value. The '&' used in this scenario tells KDL that we want
` a resource reference. The '&' by itself is an unqualified resource reference,
` meaning that it is not specifically requiring a reference to a fixed type of
` resource.
`
` Conversely you can make a qualified resource reference by doing the following:

			Graphic as Foo&;

` Here we have told KDL that the reference is to a Foo type. If the user is only
` supplying a resource id then the qualified resource reference does not make
` much difference. The advantage of this will become apparent later in the 
` document.
`
` Explicit types do not have to be resource references, and instead can be an
` in place value.


		};
	};
